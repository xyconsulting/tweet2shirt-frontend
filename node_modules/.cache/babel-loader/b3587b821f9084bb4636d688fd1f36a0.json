{"ast":null,"code":"var _jsxFileName = \"/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const response = await fetch('http://localhost:4242/create-payment-intent');\n      const responseJson = await response.json();\n      const secret = responseJson.client_secret;\n      const result = await stripe.confirmCardPayment(secret, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Jenny Rosen'\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !this.props.stripe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Buy $19.99\"));\n  }\n\n}\n\nexport default CheckoutForm;","map":{"version":3,"sources":["/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js"],"names":["React","ElementsConsumer","CardElement","CardSection","CheckoutForm","Component","handleSubmit","event","preventDefault","stripe","elements","props","response","fetch","responseJson","json","secret","client_secret","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","console","log","message","paymentIntent","status","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,yBAA9C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACvCC,YADuC,GACxB,MAAOC,KAAP,IAAiB;AAC5B;AACA;AACAA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAuB,KAAKC,KAAlC;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH;;AACD,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,CAA5B;AACA,YAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA3B;AACA,YAAMC,MAAM,GAAGF,YAAY,CAACG,aAA5B;AAEA,YAAMC,MAAM,GAAG,MAAMT,MAAM,CAACU,kBAAP,CAA0BH,MAA1B,EAAkC;AACnDI,QAAAA,cAAc,EAAE;AACZC,UAAAA,IAAI,EAAEX,QAAQ,CAACY,UAAT,CAAoBpB,WAApB,CADM;AAEZqB,UAAAA,eAAe,EAAE;AACbC,YAAAA,IAAI,EAAE;AADO;AAFL;AADmC,OAAlC,CAArB;;AASA,UAAIN,MAAM,CAACO,KAAX,EAAkB;AACd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACO,KAAP,CAAaG,OAAzB;AACH,OAHD,MAGO;AACH;AACA,YAAIV,MAAM,CAACW,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC7C;AACA;AACA;AACA;AACA;AACH;AACJ;AACJ,KAvCsC;AAAA;;AAyCvCC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKzB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI;AAAQ,MAAA,QAAQ,EAAE,CAAC,KAAKK,KAAL,CAAWF,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,CADJ;AAMH;;AAhDsC;;AAmD3C,eAAeL,YAAf","sourcesContent":["import React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nclass CheckoutForm extends React.Component {\n    handleSubmit = async (event) => {\n        // We don't want to let default form submission happen here,\n        // which would refresh the page.\n        event.preventDefault();\n\n        const { stripe, elements } = this.props\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make  sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n        const response = await fetch('http://localhost:4242/create-payment-intent');\n        const responseJson = await response.json();\n        const secret = responseJson.client_secret;\n\n        const result = await stripe.confirmCardPayment(secret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n                billing_details: {\n                    name: 'Jenny Rosen',\n                },\n            }\n        });\n\n        if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            console.log(result.error.message);\n        } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n                // Show a success message to your customer\n                // There's a risk of the customer closing the window before callback\n                // execution. Set up a webhook or plugin to listen for the\n                // payment_intent.succeeded event that handles any business critical\n                // post-payment actions.\n            }\n        }\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <CardSection />\n                <button disabled={!this.props.stripe}>Buy $19.99</button>\n            </form>\n        );\n    }\n}\n\nexport default CheckoutForm;"]},"metadata":{},"sourceType":"module"}