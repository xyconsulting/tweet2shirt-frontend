{"ast":null,"code":"var _jsxFileName = \"/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js\";\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const response = await fetch('http://localhost:4242/create-payment-intent');\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen'\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Confirm order\"));\n}","map":{"version":3,"sources":["/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","response","fetch","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","console","log","message","paymentIntent","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,yBAApD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,YAAT,GAAwB;AACnC,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,QAAQ,GAAGL,WAAW,EAA5B;;AAEA,QAAMM,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH;;AAED,UAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,CAA5B;AAEA,UAAMC,MAAM,GAAG,MAAMP,MAAM,CAACQ,kBAAP,CAA0B,iBAA1B,EAA6C;AAC9DC,MAAAA,cAAc,EAAE;AACZC,QAAAA,IAAI,EAAET,QAAQ,CAACU,UAAT,CAAoBd,WAApB,CADM;AAEZe,QAAAA,eAAe,EAAE;AACbC,UAAAA,IAAI,EAAE;AADO;AAFL;AAD8C,KAA7C,CAArB;;AASA,QAAIN,MAAM,CAACO,KAAX,EAAkB;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACO,KAAP,CAAaG,OAAzB;AACH,KAHD,MAGO;AACH;AACA,UAAIV,MAAM,CAACW,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC7C;AACA;AACA;AACA;AACA;AACH;AACJ;AACJ,GAnCD;;AAqCA,sBACI;AAAM,IAAA,QAAQ,EAAEjB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAQ,IAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CADJ;AAMH","sourcesContent":["import React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nexport default function CheckoutForm() {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event) => {\n        // We don't want to let default form submission happen here,\n        // which would refresh the page.\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n\n        const response = await fetch('http://localhost:4242/create-payment-intent');\n\n        const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n            payment_method: {\n                card: elements.getElement(CardElement),\n                billing_details: {\n                    name: 'Jenny Rosen',\n                },\n            }\n        });\n\n        if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            console.log(result.error.message);\n        } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n                // Show a success message to your customer\n                // There's a risk of the customer closing the window before callback\n                // execution. Set up a webhook or plugin to listen for the\n                // payment_intent.succeeded event that handles any business critical\n                // post-payment actions.\n            }\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <CardSection />\n            <button disabled={!stripe}>Confirm order</button>\n        </form>\n    );\n}"]},"metadata":{},"sourceType":"module"}