{"ast":null,"code":"var _jsxFileName = \"/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js\";\nimport React from 'react';\nimport { ElementsConsumer, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\n\nclass CheckoutForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = async event => {\n      // We don't want to let default form submission happen here,\n      // which would refresh the page.\n      event.preventDefault();\n      const {\n        stripe,\n        elements\n      } = this.props;\n\n      if (!stripe || !elements) {\n        // Stripe.js has not yet loaded.\n        // Make  sure to disable form submission until Stripe.js has loaded.\n        return;\n      }\n\n      const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            name: 'Jenny Rosen'\n          }\n        }\n      });\n\n      if (result.error) {\n        // Show error to your customer (e.g., insufficient funds)\n        console.log(result.error.message);\n      } else {\n        // The payment has been processed!\n        if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n          // There's a risk of the customer closing the window before callback\n          // execution. Set up a webhook or plugin to listen for the\n          // payment_intent.succeeded event that handles any business critical\n          // post-payment actions.\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CardSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      disabled: !this.props.stripe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Confirm order\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js"],"names":["React","ElementsConsumer","CardElement","CardSection","CheckoutForm","Component","handleSubmit","event","preventDefault","stripe","elements","props","result","confirmCardPayment","payment_method","card","getElement","billing_details","name","error","console","log","message","paymentIntent","status","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,EAA0BC,WAA1B,QAA4C,yBAA5C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SACzCC,YADyC,GAC1B,MAAOC,KAAP,IAAiB;AAC9B;AACA;AACAA,MAAAA,KAAK,CAACC,cAAN;AAEA,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA;AAAT,UAAqB,KAAKC,KAAhC;;AAEA,UAAI,CAACF,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,YAAME,MAAM,GAAG,MAAMH,MAAM,CAACI,kBAAP,CAA0B,iBAA1B,EAA6C;AAChEC,QAAAA,cAAc,EAAE;AACdC,UAAAA,IAAI,EAAEL,QAAQ,CAACM,UAAT,CAAoBd,WAApB,CADQ;AAEde,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EAAE;AADS;AAFH;AADgD,OAA7C,CAArB;;AASA,UAAIN,MAAM,CAACO,KAAX,EAAkB;AAChB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYT,MAAM,CAACO,KAAP,CAAaG,OAAzB;AACD,OAHD,MAGO;AACL;AACA,YAAIV,MAAM,CAACW,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC/C;AACA;AACA;AACA;AACA;AACD;AACF;AACF,KApCwC;AAAA;;AAsCzCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAM,MAAA,QAAQ,EAAE,KAAKnB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAQ,MAAA,QAAQ,EAAE,CAAC,KAAKK,KAAL,CAAWF,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CADF;AAMD;;AA7CwC","sourcesContent":["import React from 'react';\nimport {ElementsConsumer, CardElement} from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\n\nclass CheckoutForm extends React.Component {\n  handleSubmit = async (event) => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    const {stripe, elements} = this.props\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make  sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.confirmCardPayment('{CLIENT_SECRET}', {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: 'Jenny Rosen',\n        },\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <CardSection />\n        <button disabled={!this.props.stripe}>Confirm order</button>\n      </form>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}