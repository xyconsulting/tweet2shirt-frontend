{"ast":null,"code":"// File generated from our OpenAPI spec\n'use strict';\n\nconst StripeResource = require('../StripeResource');\n\nconst stripeMethod = StripeResource.method; // Since path can either be `account` or `accounts`, support both through stripeMethod path;\n\nmodule.exports = StripeResource.extend({\n  path: '',\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/reject'\n  }),\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts'\n  }),\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}'\n  }),\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list'\n  }),\n\n  retrieve(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}'\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n\n      return stripeMethod({\n        method: 'GET',\n        path: 'account'\n      }).apply(this, arguments);\n    }\n  },\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}'\n  }),\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities',\n    methodType: 'list'\n  }),\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities/{capability}'\n  }),\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/capabilities/{capability}'\n  }),\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts'\n  }),\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts',\n    methodType: 'list'\n  }),\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts/{id}'\n  }),\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/login_links'\n  }),\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons'\n  }),\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/persons/{person}'\n  }),\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons',\n    methodType: 'list'\n  }),\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons/{person}'\n  }),\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons/{person}'\n  })\n});","map":{"version":3,"sources":["/Users/stanmattingly/node_modules/stripe/lib/resources/Accounts.js"],"names":["StripeResource","require","stripeMethod","method","module","exports","extend","path","reject","create","del","list","methodType","retrieve","id","apply","arguments","undefined","shift","update","listCapabilities","retrieveCapability","updateCapability","createExternalAccount","deleteExternalAccount","listExternalAccounts","retrieveExternalAccount","updateExternalAccount","createLoginLink","createPerson","deletePerson","listPersons","retrievePerson","updatePerson"],"mappings":"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","sourcesContent":["// File generated from our OpenAPI spec\n\n'use strict';\n\nconst StripeResource = require('../StripeResource');\nconst stripeMethod = StripeResource.method;\n\n// Since path can either be `account` or `accounts`, support both through stripeMethod path;\nmodule.exports = StripeResource.extend({\n  path: '',\n\n  reject: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/reject',\n  }),\n\n  create: stripeMethod({\n    method: 'POST',\n    path: 'accounts',\n  }),\n\n  del: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}',\n  }),\n\n  list: stripeMethod({\n    method: 'GET',\n    path: 'accounts',\n    methodType: 'list',\n  }),\n\n  retrieve(id) {\n    // No longer allow an api key to be passed as the first string to this function due to ambiguity between\n    // old account ids and api keys. To request the account for an api key, send null as the id\n    if (typeof id === 'string') {\n      return stripeMethod({\n        method: 'GET',\n        path: 'accounts/{id}',\n      }).apply(this, arguments);\n    } else {\n      if (id === null || id === undefined) {\n        // Remove id as stripeMethod would complain of unexpected argument\n        [].shift.apply(arguments);\n      }\n      return stripeMethod({\n        method: 'GET',\n        path: 'account',\n      }).apply(this, arguments);\n    }\n  },\n\n  update: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}',\n  }),\n\n  listCapabilities: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities',\n    methodType: 'list',\n  }),\n\n  retrieveCapability: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/capabilities/{capability}',\n  }),\n\n  updateCapability: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/capabilities/{capability}',\n  }),\n\n  createExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts',\n  }),\n\n  deleteExternalAccount: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  listExternalAccounts: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts',\n    methodType: 'list',\n  }),\n\n  retrieveExternalAccount: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  updateExternalAccount: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/external_accounts/{id}',\n  }),\n\n  createLoginLink: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/login_links',\n  }),\n\n  createPerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons',\n  }),\n\n  deletePerson: stripeMethod({\n    method: 'DELETE',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n\n  listPersons: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons',\n    methodType: 'list',\n  }),\n\n  retrievePerson: stripeMethod({\n    method: 'GET',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n\n  updatePerson: stripeMethod({\n    method: 'POST',\n    path: 'accounts/{account}/persons/{person}',\n  }),\n});\n"]},"metadata":{},"sourceType":"script"}