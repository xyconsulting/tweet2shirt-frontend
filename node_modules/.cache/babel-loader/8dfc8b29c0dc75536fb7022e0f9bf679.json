{"ast":null,"code":"var _jsxFileName = \"/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js\";\nimport React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport CardSection from './CardSection';\nimport OptionsSection from './OptionsSection';\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const data = {\n      name: document.getElementById(\"fullName\").value,\n      email: document.getElementById(\"email\").value,\n      address: document.getElementById(\"address\").value,\n      city: document.getElementById(\"city\").value,\n      state: document.getElementById(\"state\").value,\n      size: document.getElementById(\"size\").value\n    };\n    const response = await fetch('http://localhost:4242/create-payment-intent', {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    console.log(response);\n    const responseJson = await response.json();\n    console.log(responseJson);\n    const secret = responseJson.secret;\n    const result = await stripe.confirmCardPayment(secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: document.getElementById(\"fullName\").value\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {// Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OptionsSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Confirm order\"));\n}","map":{"version":3,"sources":["/Users/stanmattingly/Desktop/react-dev/tweet2shirt/client/src/components/CheckoutForm.js"],"names":["React","useStripe","useElements","CardElement","CardSection","OptionsSection","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","data","name","document","getElementById","value","email","address","city","state","size","response","fetch","method","mode","headers","body","JSON","stringify","console","log","responseJson","json","secret","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","message","paymentIntent","status"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,WAAjC,QAAoD,yBAApD;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,YAAT,GAAwB;AACnC,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClC;AACA;AACAA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAI,CAACJ,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACtB;AACA;AACA;AACH;;AAED,UAAMI,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAEC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KADjC;AAETC,MAAAA,KAAK,EAAEH,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAF/B;AAGTE,MAAAA,OAAO,EAAEJ,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAHnC;AAITG,MAAAA,IAAI,EAAEL,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,KAJ7B;AAKTI,MAAAA,KAAK,EAAEN,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,KAL/B;AAMTK,MAAAA,IAAI,EAAEP,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC;AAN7B,KAAb;AASA,UAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,EAA+C;AACvEC,MAAAA,MAAM,EAAE,MAD+D;AAEvEC,MAAAA,IAAI,EAAE,MAFiE;AAGvEC,MAAAA,OAAO,EAAE;AACL,wBAAe;AADV,OAH8D;AAMvEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,IAAf;AANiE,KAA/C,CAA5B;AAQAkB,IAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,UAAMU,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACA,UAAME,MAAM,GAAGF,YAAY,CAACE,MAA5B;AAEA,UAAMC,MAAM,GAAG,MAAM5B,MAAM,CAAC6B,kBAAP,CAA0BF,MAA1B,EAAkC;AACnDG,MAAAA,cAAc,EAAE;AACZC,QAAAA,IAAI,EAAE9B,QAAQ,CAAC+B,UAAT,CAAoBpC,WAApB,CADM;AAEZqC,QAAAA,eAAe,EAAE;AACb3B,UAAAA,IAAI,EAAEC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC;AAD7B;AAFL;AADmC,KAAlC,CAArB;;AASA,QAAImB,MAAM,CAACM,KAAX,EAAkB;AACd;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYI,MAAM,CAACM,KAAP,CAAaC,OAAzB;AACH,KAHD,MAGO;AACH;AACA,UAAIP,MAAM,CAACQ,aAAP,CAAqBC,MAArB,KAAgC,WAApC,EAAiD,CAC7C;AACA;AACA;AACA;AACA;AACH;AACJ;AACJ,GAvDD;;AAyDA,sBACI;AAAM,IAAA,QAAQ,EAAEnC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAQ,IAAA,QAAQ,EAAE,CAACF,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,CADJ;AAOH","sourcesContent":["import React from 'react';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n\nimport CardSection from './CardSection';\nimport OptionsSection from './OptionsSection';\n\nexport default function CheckoutForm() {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event) => {\n        // We don't want to let default form submission happen here,\n        // which would refresh the page.\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n\n        const data = {\n            name: document.getElementById(\"fullName\").value,\n            email: document.getElementById(\"email\").value,\n            address: document.getElementById(\"address\").value,\n            city: document.getElementById(\"city\").value,\n            state: document.getElementById(\"state\").value,\n            size: document.getElementById(\"size\").value\n        }\n\n        const response = await fetch('http://localhost:4242/create-payment-intent',{\n            method: 'POST',\n            mode: 'cors',\n            headers: {\n                'Content-Type':'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n        console.log(response);\n        const responseJson = await response.json();\n        console.log(responseJson);\n        const secret = responseJson.secret;\n\n        const result = await stripe.confirmCardPayment(secret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n                billing_details: {\n                    name: document.getElementById(\"fullName\").value,\n                },\n            },\n        });\n\n        if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            console.log(result.error.message);\n        } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n                // Show a success message to your customer\n                // There's a risk of the customer closing the window before callback\n                // execution. Set up a webhook or plugin to listen for the\n                // payment_intent.succeeded event that handles any business critical\n                // post-payment actions.\n            }\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <OptionsSection/>\n            <CardSection />\n            <button disabled={!stripe}>Confirm order</button>\n        </form>\n    );\n}"]},"metadata":{},"sourceType":"module"}