{"ast":null,"code":"var _jsxFileName = \"/Users/stanmattingly/Desktop/react-dev/tweet2shirt/src/components/Product.js\";\nimport React from 'react';\nimport './Product.css';\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n\nvar firebase = require(\"firebase/app\");\n\nrequire('firebase/firestore');\n\nfirebase.initializeApp(require('../db.json'));\nconst db = firebase.firestore();\nconst stripePromise = loadStripe(\"pk_test_H9E39lVcxUPU9ZJQJYad0dDi00YPeF5LjX\");\n\nconst CheckoutForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardElement, {\n    options: {\n      style: {\n        base: {\n          fontSize: '16px',\n          color: '#424770',\n          '::placeholder': {\n            color: '#aab7c4'\n          }\n        },\n        invalid: {\n          color: '#9e2146'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Pay\"));\n};\n\nexport class Product extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      product: {}\n    };\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    db.collection('products').where(\"id\", \"==\", id).get().then(response => response.docs[0].data()).then(data => this.setState({\n      product: data\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"Product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.product.mockup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, this.state.product.name), /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardElement, {\n      options: {\n        style: {\n          base: {\n            fontSize: '16px',\n            color: '#424770',\n            '::placeholder': {\n              color: '#aab7c4'\n            }\n          },\n          invalid: {\n            color: '#9e2146'\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: !stripe,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, \"Pay\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/stanmattingly/Desktop/react-dev/tweet2shirt/src/components/Product.js"],"names":["React","CardElement","Elements","useElements","useStripe","loadStripe","firebase","require","initializeApp","db","firestore","stripePromise","CheckoutForm","stripe","elements","handleSubmit","event","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","style","base","fontSize","color","invalid","Product","Component","constructor","props","state","isLoaded","product","componentDidMount","bind","id","match","params","collection","where","get","then","response","docs","data","setState","render","mockup","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Product.css';\nimport {CardElement, Elements, useElements, useStripe} from '@stripe/react-stripe-js';\nimport {loadStripe} from '@stripe/stripe-js';\nvar firebase = require(\"firebase/app\");\nrequire('firebase/firestore');\n\nfirebase.initializeApp(require('../db.json'));\n\nconst db = firebase.firestore();\nconst stripePromise = loadStripe(\"pk_test_H9E39lVcxUPU9ZJQJYad0dDi00YPeF5LjX\");\n\nconst CheckoutForm = () => {\n    const stripe = useStripe();\n    const elements = useElements();\n  \n    const handleSubmit = async (event) => {\n      // Block native form submission.\n      event.preventDefault();\n  \n      if (!stripe || !elements) {\n        // Stripe.js has not loaded yet. Make sure to disable\n        // form submission until Stripe.js has loaded.\n        return;\n      }\n  \n      // Get a reference to a mounted CardElement. Elements knows how\n      // to find your CardElement because there can only ever be one of\n      // each type of element.\n      const cardElement = elements.getElement(CardElement);\n  \n      // Use your card Element with other Stripe.js APIs\n      const {error, paymentMethod} = await stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n      });\n  \n      if (error) {\n        console.log('[error]', error);\n      } else {\n        console.log('[PaymentMethod]', paymentMethod);\n      }\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <CardElement\n          options={{\n            style: {\n              base: {\n                fontSize: '16px',\n                color: '#424770',\n                '::placeholder': {\n                  color: '#aab7c4',\n                },\n              },\n              invalid: {\n                color: '#9e2146',\n              },\n            },\n          }}\n        />\n        <button type=\"submit\" disabled={!stripe}>\n          Pay\n        </button>\n      </form>\n    );\n  };\n\nexport class Product extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            product: {}\n        };\n        this.componentDidMount = this.componentDidMount.bind(this);\n    }\n    componentDidMount(){\n        let id = this.props.match.params.id;\n        db.collection('products').where(\"id\",\"==\",id).get()\n            .then((response) => response.docs[0].data())\n            .then((data) => this.setState({product:data}))\n    }\n    render(){\n        return(\n            <div class=\"Product\">\n                <img src={this.state.product.mockup}/>\n                <h1>{this.state.product.name}</h1>\n                <form>\n                    <CardElement\n                        options={{\n                        style: {\n                            base: {\n                            fontSize: '16px',\n                            color: '#424770',\n                            '::placeholder': {\n                                color: '#aab7c4',\n                            },\n                            },\n                            invalid: {\n                            color: '#9e2146',\n                            },\n                        },\n                        }}\n                    />\n                    <button type=\"submit\" disabled={!stripe}>\n                        Pay\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}